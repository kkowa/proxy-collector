/*
 * kkowa Open API
 *
 *  This page is automatically generated documentation of kkowa server's Open API.  Features are support by GraphQL. API is designed for communication between organization components to perform simple tasks with simple HTTP calls only. Advanced users may also use this API using their API keys to build their own programs.  For more information not described in this page, please contact organization or project administrators or maintainers.     
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`create_documents_api_documents_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDocumentsApiDocumentsPostError {
    Status422(crate::models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Create new documents. Any non-existing folders will be created automatically.
pub async fn create_documents_api_documents_post(configuration: &configuration::Configuration, create_document: Vec<crate::models::CreateDocument>) -> Result<Vec<crate::models::Document>, Error<CreateDocumentsApiDocumentsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/documents", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_document);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateDocumentsApiDocumentsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

